from importt import *
import logging
from db_manage import *
from base_words import *
from data_words import base2

api = TOKEN
logging.basicConfig(level=logging.INFO)
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())

#–≤—ã–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–µ, –ø—Ä–∞–≤–∏–ª–∞, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
#–ø—Ä–æ–≤–µ—Ä—è–µ–º. –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–¥, —Ç–æ –ª–∞–¥–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
@dp.message_handler(commands="start")
async def start_command(message: types.Message):
    await start(message)

async def start(message):
    await bot.send_message(message.chat.id, md.text("–ü—Ä–∏–≤–µ—Ç ‚úå, —ç—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–æ–ª–∏—Ü—ã –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω –º–∏—Ä–∞! üåè\n–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–º–º–∞–Ω–¥ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —Å–∏–Ω–µ–π –∫–Ω–æ–ø–∫–æ–π menu —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞."))
    with sq.connect('data_base.db') as con:
        sql = con.cursor()
        sql.execute(f"SELECT user_id FROM users WHERE user_id == {str(message.chat.id)}")
        if sql.fetchone() is None:
            sql.execute("INSERT INTO users (user_id, user_link, first_name, full_name, statpm) VALUES (?, ?, ?, ?, ?)", (message.chat.id, message.chat.mention, message.chat.first_name, message.chat.full_name, ''))
    await game_f(message.chat.id)

@dp.message_handler(commands="help")
async def help_command(message: types.Message):
    await message.answer("–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å —Å –ø—Ä–æ–±–ª–µ–º–æ–π ‚öô –≤ –±–æ—Ç–µ, –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞ –Ω–∞–ø–∏—Å–∞–≤ –µ–º—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ. üë®‚Äçüíª https://t.me/kleget")

@dp.message_handler(commands="info")
async def help_command(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∫–Ω–æ–ø–∫–æ–π —Å –Ω–∏–∏–∑—É, –∑–∞—Ç–µ–º —Ç–∞–∫–∂–µ –≤—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—É.\n–ü–æ—Å–ª–µ –±–æ—Ç –¥–∞–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä 4 —Å—Ç–æ–ª–∏—Ü—ã, 1 –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä–Ω–∞—è.\n–ò–≥—Ä–∞–π –∏ —É—á–∏ —Å—Ç–æ–ª–∏—Ü—ã —Å—Ç—Ä–∞–Ω!")
    await game_f(message.chat.id)

#–ø–æ /game –≤—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º —É—Ä–æ–≤–Ω—è
# @dp.message_handler(commands='game')
# async def levels_button(message: types.Message):
#     await game_f(message.chat.id)

async def game_f(id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)  # —Ö–∑, –Ω–∞–≤–µ—Ä–Ω–æ–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–æ–ø–æ–∫
    markup.row("—É—Ä–æ–≤–µ–Ω—å 1", "—É—Ä–æ–≤–µ–Ω—å 2", "—É—Ä–æ–≤–µ–Ω—å 3").add("—É—Ä–æ–≤–µ–Ω—å 4", "—É—Ä–æ–≤–µ–Ω—å 5", "—É—Ä–æ–≤–µ–Ω—å 6")  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await bot.send_message(id, "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å.\n–ß–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º —Å–ª–æ–∂–Ω–µ–µ! üí™", reply_markup=markup)


#–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç—ã–µ –∫–Ω–æ–ø–∫–∏
@dp.message_handler()
async def filter_msg(message: types.Message):
    if message.text in ["—É—Ä–æ–≤–µ–Ω—å 1", "—É—Ä–æ–≤–µ–Ω—å 2", "—É—Ä–æ–≤–µ–Ω—å 3", "—É—Ä–æ–≤–µ–Ω—å 4", "—É—Ä–æ–≤–µ–Ω—å 5", "—É—Ä–æ–≤–µ–Ω—å 6"]:
        await db_update('—É—Ä–æ–≤–µ–Ω—å', message.chat.id, message.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)  # —Ö–∑, –Ω–∞–≤–µ—Ä–Ω–æ–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–æ–ø–æ–∫
        markup.add('–±–∏–ª–µ—Ç 1', '–±–∏–ª–µ—Ç 2', '–±–∏–ª–µ—Ç 3', '–±–∏–ª–µ—Ç 4', '–±–∏–ª–µ—Ç 5', '–±–∏–ª–µ—Ç 6', '–±–∏–ª–µ—Ç 7', '–±–∏–ª–µ—Ç 8', '<- –Ω–∞–∑–∞–¥')  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –±–∏–ª–µ—Ç.\n–ß–µ–º –≤—ã—à–µ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞, —Ç–∞–º —Å–ª–æ–∂–Ω–µ–µ. üí™', reply_markup=markup)

    elif message.text in ['–±–∏–ª–µ—Ç 1', '–±–∏–ª–µ—Ç 2', '–±–∏–ª–µ—Ç 3', '–±–∏–ª–µ—Ç 4', '–±–∏–ª–µ—Ç 5', '–±–∏–ª–µ—Ç 6', '–±–∏–ª–µ—Ç 7', '–±–∏–ª–µ—Ç 8', '<- –Ω–∞–∑–∞–¥']:
        statpm = ''
        await db_update('statpm', message.chat.id, statpm)
        if message.text == '<- –Ω–∞–∑–∞–¥':
            await game_f(message.chat.id)
        else:
            await db_update('–±–∏–ª–µ—Ç', message.chat.id, message.text)
            # markup = types.ReplyKeyboardRemove()
            await bot.send_message(
                message.chat.id,
                md.text("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!"),
                # reply_markup=markup,  # —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                # parse_mode=ParseMode.MARKDOWN,  # —Ö–∑
            )
            await start_1(message)
            await button_answer(message)


async def start_1(message):
    lvl = await db_select('—É—Ä–æ–≤–µ–Ω—å', message.chat.id)
    crd = await db_select('–±–∏–ª–µ—Ç', message.chat.id)
    tbword = str(lvl[0] + crd[0]).replace(' ', '')
    await db_update('fbw', message.chat.id, tbword)
    await db_update('indx', message.chat.id, 0)

async def button_answer(message):
    fbw = await db_select('fbw', message.chat.id)
    indx = await db_select('indx', message.chat.id)
    fbwz = globals()[fbw[0]]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)  # —Ö–∑, –Ω–∞–≤–µ—Ä–Ω–æ–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–æ–ø–æ–∫
    arr = [base2[random.randint(0, 100)].split('$')[1], base2[random.randint(101, 170)].split('$')[1], base2[random.randint(171, 255)].split('$')[1], fbwz[int(indx[0])].split('$')[1]]
    arr.sort()
    markup.row(arr[0], arr[1]).add(arr[2], arr[3])
    await bot.send_message(message.chat.id, text=f"–°—Ç–æ–ª–∏—Ü–∞ —Å—Ç—Ä–∞–Ω—ã {fbwz[int(indx[0])].split('$')[0]} - —ç—Ç–æ ", reply_markup=markup)
    arr.clear()
    await answer.stolica.set()


class answer(StatesGroup):                                                             #—Å–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –∏ –ø–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä StatesGroup(—Ö–∑ —á—Ç–æ —ç—Ç–æ)
    stolica = State()

@dp.message_handler(state=answer.stolica)
async def play(message: types.Message, state: FSMContext):
    await bot.send_message('-1001806040146', f"{message.chat.mention}, {message.text}")
    fbw = await db_select('fbw', message.chat.id)
    indx = await db_select('indx', message.chat.id)
    fbwz = globals()[fbw[0]]

    await state.update_data(stolica=message.text)  # –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ update_data(), –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç—å
    data = await state.get_data()
    statpm = await db_select("statpm", message.chat.id)
    statpm = statpm[0]
    if data['stolica'] == fbwz[int(indx[0])].split('$')[1]:
        statpm += '+'
        await db_update('statpm', message.chat.id, statpm)
        await bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ, —Å—Ç–æ–ª–∏—Ü–∞ —Å—Ç—Ä–∞–Ω—ã {fbwz[int(indx[0])].split('$')[0]} - —ç—Ç–æ {fbwz[int(indx[0])].split('$')[1]}.")
        await state.finish()  # –î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ —Ç–∞–∫–∂–µ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –∂–µ –≤–∞–º –Ω–∞–¥–æ —Å–±—Ä–æ—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å: await state.reset_state(with_data=False)
        if int(indx[0]) == 0 or int(indx[0]) < len(fbwz)-1:
            await db_update('indx', message.chat.id, int(indx[0]) + 1)
            await button_answer(message)
        else:
            await db_update('indx', message.chat.id, 0)
            # markup = types.ReplyKeyboardRemove()
            statpm = await db_select("statpm", message.chat.id)
            ar = await stats_hendler(statpm[0])
            await bot.send_message(
                message.chat.id,
                md.text(f"–ú–æ–ª–æ–¥–µ—Ü, —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!\n{ar}"),
                # reply_markup=markup,  # —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                # parse_mode=ParseMode.MARKDOWN,  # —Ö–∑
            )
            await game_f(message.chat.id)

    elif data['stolica'] == '/game':
        # markup = types.ReplyKeyboardRemove()
        await bot.send_message(
            message.chat.id,
            md.text(f"–ü–æ–∫–∞-–ø–æ–∫–∞! üëã"),
            # reply_markup=markup,  # —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            # parse_mode=ParseMode.MARKDOWN,  # —Ö–∑
        )
        await state.finish()
        await game_f(message.chat.id)

    elif data['stolica'] == '/start':
        # markup = types.ReplyKeyboardRemove()
        await bot.send_message(
            message.chat.id,
            md.text(f"–ü–æ–∫–∞-–ø–æ–∫–∞! üëã"),
            # reply_markup=markup,  # —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            # parse_mode=ParseMode.MARKDOWN,  # —Ö–∑
        )
        await state.finish()
        await start(message)

    else:
        statpm += '-'
        await db_update('statpm', message.chat.id, statpm)
        await bot.send_message(message.chat.id, f"‚ùå –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Å—Ç–æ–ª–∏—Ü–∞ —Å—Ç—Ä–∞–Ω—ã {fbwz[int(indx[0])].split('$')[0]} - —ç—Ç–æ {fbwz[int(indx[0])].split('$')[1]}.")
        await state.finish()  # –î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ —Ç–∞–∫–∂–µ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –∂–µ –≤–∞–º –Ω–∞–¥–æ —Å–±—Ä–æ—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å: await state.reset_state(with_data=False)
        if int(indx[0]) == 0 or int(indx[0]) < len(fbwz)-1:
            await db_update('indx', message.chat.id, int(indx[0]) + 1)
            await button_answer(message)
        else:
            await db_update('indx', message.chat.id, 0)
            # markup = types.ReplyKeyboardRemove()
            statpm = await db_select("statpm", message.chat.id)
            ar = await stats_hendler(statpm[0])
            await bot.send_message(
                message.chat.id,
                md.text(f"–ú–æ–ª–æ–¥–µ—Ü, —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!\n{ar}"),
                # reply_markup=markup,  # —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                # parse_mode=ParseMode.MARKDOWN,  # —Ö–∑
            )
            await game_f(message.chat.id)

async def stats_hendler(statss):
    statss = statss.replace('+', '‚úÖ')
    statss = statss.replace('-', '‚ùå')
    return statss

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
